/**
 * DEVELOPMENT WEBPACK CONFIGURATION
 */

const fs = require('fs');
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const webpack = require('webpack');
const argv = require('minimist')(process.argv.slice(2));

const paths = require('./configs/paths');

const { __PORT__ } = require('./configs/globals');
const plugins = require('./configs/plugins');
const postcssPlugins = require('./configs/postcssOptions');

// PostCSS plugins
// const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;
const LodashModuleReplacementPlugin = require('lodash-webpack-plugin');

const port = argv.port || __PORT__ || 3000;

module.exports = require('./webpack.base.babel')({
  // Add hot reloading in development
  entry: Object.assign(
    {
      main: [
        `webpack-hot-middleware/client?path=http://localhost:${port}/__webpack_hmr`,
        path.join(paths.appPath, 'admin', 'admin', 'src', 'appDev.js'),
      ],
    },
    plugins.src.reduce((acc, current) => {
      acc[current] = path.resolve(plugins.folders[current], 'app.js');

      return acc;
    }, {}),
  ),

  // Don't use hashes in dev mode for better performance
  output: {
    filename: '[name].js',
    chunkFilename: '[name].chunk.js',
    publicPath: `http://127.0.0.1:${port}/`,
  },

  // Add development plugins
  plugins: [
    new webpack.HotModuleReplacementPlugin(), // Tell webpack we want hot reloading
    new webpack.optimize.CommonsChunkPlugin({
      name: 'common',
      minChunks: 2,
    }),
    new LodashModuleReplacementPlugin(),
    new HtmlWebpackPlugin({
      favicon: 'admin/src/favicon.ico',
      inject: true, // Inject all files that are generated by webpack, e.g. bundle.js
      templateContent: templateContent(), // eslint-disable-line no-use-before-define
      chunksSortMode: 'auto',
    }),
    // new BundleAnalyzerPlugin(),
  ], // eslint-disable-line no-use-before-define,
  postcssPlugins,
  // Tell babel that we want hot-reload
  babelPresets: [
    require.resolve('babel-preset-react-hmre'),
  ],
});

/**
 * We dynamically generate the HTML content in development so that the different
 * DLL Javascript files are loaded in script tags and available to our application.
 */
function templateContent() {
  const html = fs.readFileSync(paths.indexHtml).toString();
  
  return html;
}
